const fs = require('fs')
const cheerio = require('cheerio')
const request = require('request')
const HtmlTableToJson = require('html-table-to-json');
const express = require('express')
const VkBot = require('node-vk-bot-api');
const Markup = require('node-vk-bot-api/lib/markup')
const Session = require('node-vk-bot-api/lib/session');
const Stage = require('node-vk-bot-api/lib/stage');
const Scene = require('node-vk-bot-api/lib/scene');
const bodyParser = require('body-parser')
const vk_token = 'a8dede36c00ac4d8b6fd4ce2a71f4aa9123096189bbe363b789621b182c4d56b31dcaa49ae20483d3248c'
const bot = new VkBot(vk_token)

const schedule_time = JSON.parse(fs.readFileSync('./time.json'))
const schedule = JSON.parse(fs.readFileSync('./auto_schedule.json'))
const schedule_sceleton = JSON.parse(fs.readFileSync('./schedule_sceleton.json'))

let emoji = 'üòäüòÉüòâüòÑüòáüò®üòÄüòÅüò±üëç‚úåüëèüëåüåü‚òÄ‚õÑüòπüò∏üò∫‚è∞üåù‚úè‚úíüéâüéäüìÖüìíüììüìîüìïüìñüìóüìòüìôüìöüìùüìúüìâüìäüìãüìåüìçüìéüìêüî¨üèà‚öΩ'

let port = process.env.PORT || 3000

let app = express()
app.use(bodyParser.json());

// META

const config = {
    timeStepMs: 2*60*60*1000,
    forms_meaning: {
        "5–ê": {form: {v:5, i:0}, letter: {v:"–ê", i:0}},
        "5–ë": {form: {v:5, i:0}, letter: {v:"–ë", i:1}},
        "5–í": {form: {v:5, i:0}, letter: {v:"–í", i:2}},
        "5–ì": {form: {v:5, i:0}, letter: {v:"–ì", i:3}},
        "6–ê": {form: {v:6, i:1}, letter: {v:"–ê", i:0}},
        "6–ë": {form: {v:6, i:1}, letter: {v:"–ë", i:1}},
        "6–í": {form: {v:6, i:1}, letter: {v:"–í", i:2}},
        "6–ì": {form: {v:6, i:1}, letter: {v:"–ì", i:3}},
        "7–ê": {form: {v:7, i:2}, letter: {v:"–ê", i:0}},
        "7–ë": {form: {v:7, i:2}, letter: {v:"–ë", i:1}},
        "7–í": {form: {v:7, i:2}, letter: {v:"–í", i:2}},
        "7–ì": {form: {v:7, i:2}, letter: {v:"–ì", i:3}},
        "8–ê": {form: {v:8, i:3}, letter: {v:"–ê", i:0}},
        "8–ë": {form: {v:8, i:3}, letter: {v:"–ë", i:1}},
        "8–í": {form: {v:8, i:3}, letter: {v:"–í", i:2}},
        "8–ì": {form: {v:8, i:3}, letter: {v:"–ì", i:3}},
        "9–ê": {form: {v:9, i:4}, letter: {v:"–ê", i:0}},
        "9–ë": {form: {v:9, i:4}, letter: {v:"–ë", i:1}},
        "9–í": {form: {v:9, i:4}, letter: {v:"–í", i:2}},
        "9–ì": {form: {v:9, i:4}, letter: {v:"–ì", i:3}},
        "10–ê": {form: {v:10, i:5}, letter: {v:"–ê", i:0}},
        "10–ë": {form: {v:10, i:5}, letter: {v:"–ë", i:1}},
        "11–ê": {form: {v:11, i:6}, letter: {v:"–ê", i:0}},
        "11–ë": {form: {v:11, i:6}, letter: {v:"–ë", i:1}}
    },
    lesson_ctx: [
        "–ê–ª–≥–µ–±—Ä–∞",
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
        "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è",
        "–ë–∏–æ–ª–æ–≥–∏—è",
        "–í–Ω.–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "–í–Ω.–ñ–∏–∑–Ω—å —É—á.—Å–æ–æ–±—â–µ—Å—Ç–≤",
        "–í–Ω.–û–ë–ñ",
        "–í–Ω.–û–î–ù–ö–ù–†",
        "–í–Ω.–ü—Ä–∞–∫—Ç–∏–∫—É–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
        "–í–Ω.–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞",
        "–í–Ω.–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ª–∞–±.",
        "–í–Ω.–≤–æ–∫–∞–ª",
        "–í–Ω.–¥–∏–∞–ª–æ–≥ –∫—É–ª—å—Ç—É—Ä",
        "–í–Ω.–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
        '–í–Ω.–º–µ—Ç–∞–ø—Ä–µ–¥–º–µ—Ç "–°–ª–æ–≤–æ"',
        "–í–Ω.–ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω",
        "–í–Ω.—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        "–í–Ω.—Å–ø–æ—Ä—Ç",
        "–í–Ω.—Å—Ü–µ–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ—á—å",
        "–í—Ç–æ—Ä–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫",
        "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
        "–ò–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "–ò—Å—Ç–æ—Ä–∏—è",
        "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "–ú—É–∑—ã–∫–∞",
        "–û–ë–ñ",
        "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
        "–û—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º",
        "–ü—Ä–∞–≤–æ",
        "–†–æ–¥–Ω–æ–π —è–∑—ã–∫\\—Ä–æ–¥–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è",
        "–§–∏–∑–∏–∫–∞",
        "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞",
        "–•–∏–º–∏—è",
        "–≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
    ]
}

const keyboards = {
    default: Markup.keyboard([
        [
            Markup.button({
                action: {
                  type: 'open_link',
                  link: 'https://vk.com/im?sel=211349777',
                  label: '‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ö†Ô∏è',
                  payload: JSON.stringify({
                    url: 'https://vk.com/im?sel=211349777',
                  }),
                }
              })
        ],
        [
            Markup.button({
                action: {
                  type: 'open_link',
                  link: 'https://vk.com/im?sel=421614165',
                  label: 'üåù –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏—Ä–∞–ª—É üåù',
                  payload: JSON.stringify({
                    url: 'https://vk.com/im?sel=421614165',
                  }),
                }
              }),
        ],
        [
            Markup.button('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ')
        ],
        [
            Markup.button('üìé –°–æ—Ü.—Å–µ—Ç–∏ üìé')
        ]
    ])
    .oneTime(),
    massmedia: Markup.keyboard([
        [
            Markup.button('üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå', 'positive')
        ],
        [
            Markup.button({
                action: {
                    type: 'open_link',
                    link: 'https://www.instagram.com/gymnine_/',
                    label: 'üìï Instagram üìô',
                    payload: JSON.stringify({
                    url: 'https://www.instagram.com/gymnine_/',
                    }),
                }
            })
        ],
        [
            Markup.button({
                action: {
                    type: 'open_link',
                    link: 'https://vk.com/gymnasianumber9',
                    label: 'üìò –ì—Ä—É–ø–ø–∞ VK üìò',
                    payload: JSON.stringify({
                    url: 'https://vk.com/gymnasianumber9',
                    }),
                }
            })
        ],
        [
            Markup.button({
                action: {
                    type: 'open_link',
                    link: 'http://gym9.ru/',
                    label: 'üìú –°–∞–π—Ç –ì–∏–º–Ω–∞–∑–∏–∏ ‚Ññ9 üìú',
                    payload: JSON.stringify({
                    url: 'http://gym9.ru/',
                    }),
                }
            })
        ],
        [
            Markup.button({
                action: {
                    type: 'open_link',
                    link: 'https://uslugi.mosreg.ru/',
                    label: 'üìä –®–∫–æ–ª—å–Ω—ã–π –ø–æ—Ä—Ç–∞–ª üìä',
                    payload: JSON.stringify({
                    url: 'https://uslugi.mosreg.ru/',
                    }),
                }
            })
        ],
        //
    ]).oneTime(),
    after_schedule: Markup.keyboard([
        [
            Markup.button({
                action: {
                  type: 'open_link',
                  link: 'https://vk.com/im?sel=211349777',
                  label: '‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ö†Ô∏è',
                  payload: JSON.stringify({
                    url: 'https://vk.com/im?sel=211349777',
                  }),
                }
              })
        ],
        [Markup.button('–î–æ–±–∞–≤–∏—Ç—å –î–ó (–Ω–µ –≥–æ—Ç–æ–≤–æ)')], 
        [Markup.button('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ')],
        [Markup.button('üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå', 'positive')]
    ]).oneTime()
}

const forms_whitelist = [
    "5–ê",
    "5–ë",
    "5–í",
    "5–ì",
    "6–ê",
    "6–ë",
    "6–í",
    "6–ì",
    "7–ê",
    "7–ë",
    "7–í",
    "7–ì",
    "8–ê",
    "8–ë",
    "8–í",
    "8–ì",
    "9–ê",
    "9–ë",
    "9–í",
    "9–ì",
    "10–ê",
    "10–ë",
    "11–ê",
    "11–ë",
]

const whitelist = [
    "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå",
    "–ù–∞—á–∞—Ç—å",
    "üìé –°–æ—Ü.—Å–µ—Ç–∏ üìé",
    "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ"
]

const lessons_counter = {
    1: {
        h: 9,
        m: 15
    },
    2: {
        h: 10,
        m: 10
    },
    3: {
        h: 11,
        m: 5
    },
    4: {
        h: 12,
        m: 10
    },
    5: {
        h: 13,
        m: 10
    },
    6: {
        h: 14,
        m: 5
    },
    7: {
        h: 15,
        m: 0
    },
    8: {
        h: 15,
        m: 55
    },
    9: {
        h: 16,
        m: 50
    }
}

// END OF META

// FUNCTIONS
const getScheduleByDateAndForm = (form => {
console.log(form)
    // get DAY OF WEEK
    let date = new Date()
    let getDayOfWeek = () => {
        let day = date.getDay() - 1 
        let toReturn = {
            current: day
        }
        day == 4 || day == 5 ? toReturn.next = 0 : toReturn.next = day + 1
        return toReturn
    }
    let dayOfWeek = getDayOfWeek()
    console.log('DAY_OF_WEEK', dayOfWeek)
    let now = {
        hours: date.getHours() + 3,
        minutes: date.getMinutes()
    }

    console.log(`Now: ${now.hours}:${now.minutes}`)

    let splitted_form = form.split('')

    let lesson_emoji = {
        1: '1Ô∏è‚É£',
        2: '2Ô∏è‚É£',
        3: '3Ô∏è‚É£',
        4: '4Ô∏è‚É£',
        5: '5Ô∏è‚É£',
        6: '6Ô∏è‚É£',
        7: '7Ô∏è‚É£',
        8: '8Ô∏è‚É£',
        9: '9Ô∏è‚É£',
        10: 'üîü'
    }
    let letters_index = {
        "–ê": 0,
        "–ë": 1,
        "–í": 2,
        "–ì": 3
    }
    let study_days = {
        //-1: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞"
        //5: "–°—É–±–±–æ—Ç–∞"
    }
    let form_number
    let form_letter

    switch(splitted_form.length) {
        case 2:
            form_number = splitted_form[0] - 5
            form_letter = splitted_form[1]
            break
        case 3:
            // console.log(Number(splitted_form[0])*10 + Number(splitted_form[1]) - 5)
            form_number = Number(splitted_form[0])*10 + Number(splitted_form[1]) - 5
            form_letter = splitted_form[2]
            break
    }
    let reply = ''//'–¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: \n\n'
    now.lesson = defineLesson(now.hours, now.minutes)
    if (now.lesson == 'undefined') {
        var lessons = schedule[form_number].letters[letters_index[form_letter]].schedule[dayOfWeek.next].lessons
        console.log('lessons', lessons)
        console.log({letters_index, form_letter, form_number, value: letters_index[form_letter]})
        reply += `–£—á–µ–±–Ω—ã–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –û—Ç–¥—ã—Ö–∞–π!\n\n`
        reply += `–¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å (${study_days[dayOfWeek.next]}):\n\n`
    }

    if (now.lesson !== 'undefined') {
        var lessons = schedule[form_number].letters[letters_index[form_letter]].schedule[dayOfWeek.current].lessons
        console.log('lessons', lessons)
        console.log({letters_index, form_letter, form_number, value: letters_index[form_letter]})
        reply += '–¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: \n\n'
        reply += `‚è∞ –°–µ–π—á–∞—Å —É —Ç–µ–±—è: ${lessons[now.lesson].name}\n`
        try {
            reply += `‚è∞ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫: ${lessons[Number(now.lesson)+1].name}\n`
        } catch(e) {
            reply += `–ë–æ–ª—å—à–µ —É—Ä–æ–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç üòπ\n\n`
        }
    }

    now.lessons_quantity = 0
    for (let i = 0; i<9; i++) {
        try {
            let data = `${lesson_emoji[i]}${lessons[`${i}`].name} (${schedule_time[`${i}`].start}-${schedule_time[`${i}`].stop})
üë´ ${lessons[`${i}`].teacher}`
            reply += `\n${data}`
            now.lessons_quantity += 1
        } catch(e) {
            console.log(`–£—Ä–æ–∫–∞ ‚Ññ${i+1} –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç`)
        }
    }
    if (now.lesson !== 'undefined') {
        now.mins_left = (now.lessons_quantity-now.lesson) * 45 + (now.lessons_quantity-1) * 10
        reply += `\n\n–î–æ –∫–æ–Ω—Ü–∞ —É—á–µ–±–Ω–æ–≥–æ –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å ${now.mins_left} –º–∏–Ω—É—Ç üòä`
    }

    return `${reply}`
})

const defineLesson = (h, m) => {
    let lesson_number
    try {
        Object.values(lessons_counter).forEach((object, i) => {
            if (h == object.h) {
                if (m <= object.m) {
                    lesson_number = i+1
                } else {
                    lesson_number = i+2
                }
            }
        })
        console.log(`–°–µ–π—á–∞—Å ${lesson_number} —É—Ä–æ–∫, –≤—Ä–µ–º—è ${h}:${m}`)
        return lesson_number + ''
    } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∫–µ', {e})
    }
    
}

// END OF FUNCTIONS

app.post('/', (req, res) => {
    switch(req.body.type) {
        case 'confirmation':
            console.log('1ea3e8f1')
            res.send('1ea3e8f1') // vk host confirmation
            break
    }
})

app.get('/api/getSchedule', (req, res) => {
    request('http://gym9.ru/raspis-gimnazisty.html', (err, response, body) => {
        const $ = cheerio.load(body, {
            normalizeWhitespace: true,
        })
        $('caption').each((i, el) => {
            let classForm = $(el).text().toUpperCase().split('\n').join('')
            let table = $(el).parent()
            let needToParse = !!forms_whitelist.find((wl_form) => wl_form == classForm)
            if (needToParse) {
                let ctx = config.forms_meaning[classForm]
                let _$ = cheerio.load(table.children()["1"])
                if (true) { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, i=38 == 11–ë
                    _$(_$('tbody')["0"]).children().each((j, tr) => {
                        let __$ = cheerio.load(tr)
                        __$(__$('tr')["0"]).children().each((k, td) => {
                            let ___$ = cheerio.load(td)
                            let cellValue = ___$.text().trim()
                            let splitted_CV = cellValue.split('')
                            // if (splitted_CV.length > 15) {
                                // console.log('-------')
                                let match = false
                                config.lesson_ctx.map(lesson => {
                                    if (!!~cellValue.indexOf(lesson)) {
                                        match = true
                                        // if (lesson == '–û–ë–ñ' && i == 38) console.log(cellValue)
                                        let teacher = cellValue.split(lesson).join('').trim()
                                            .split(':1').join(' (1 –≥—Ä—É–ø–ø–∞)')
                                            .split(':2').join(' (2 –≥—Ä—É–ø–ø–∞)')
                                            .split('/').join(' / ')
                                            // .split('.').join(' ').trim()
                                        let lessonNumber = j
                                        let dayIdx = k-2
                                        // console.log(dayIdx)
                                        console.log({
                                            classForm,
                                            lesson_c: j,
                                            day_i: k-2,
                                            name: lesson,
                                            teacher
                                        })
                                        schedule_sceleton[ctx.form.i].letters[ctx.letter.i].schedule[dayIdx].lessons[`${lessonNumber}`] = {
                                            name: lesson,
                                            teacher
                                        }
                                    }
                                })
                                if (!match)  console.log({v: cellValue})
                        })
                    })
                    }
                }
        })
        fs.writeFileSync('auto_schedule.json', JSON.stringify(schedule_sceleton, 0, 4))
        res.send(body)
    })
})



const session = new Session();
const scene = new Scene('schedule',
    (ctx) => {
    ctx.scene.next();
    ctx.reply('–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?');
    },
    (ctx) => {
    let candidate = ctx.message.body.trim().split(' ').join('').split('-').join('').toUpperCase();
    let result = forms_whitelist.find((form) => form == candidate)
    if (!!result) {
        ctx.session.form = candidate
        ctx.scene.leave();
        let reply
        try {
            reply = getScheduleByDateAndForm(ctx.session.form)
        } catch(e) {
            console.log(e)
            reply = e
        }
        ctx.reply(reply, null, keyboards.after_schedule)
        // ctx.reply(`–Ø –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –∏–∑ ${ctx.session.form} –∫–ª–∞—Å—Å–∞! –ù–æ –ø–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–±–µ –Ω–µ –ø–æ–∫–∞–∂—É. –ë–µ–±–µ–±–µ`, null, keyboards.default);
    } else {
        ctx.scene.leave()
        ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11–ê). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!', null, keyboards.default)
    }
    });
const stage = new Stage(scene);

bot.use(session.middleware());
bot.use(stage.middleware());

let message
let attachment
let markup

bot.on((ctx) => {
    result = whitelist.find(command => ctx.message.body == command)
    console.log(!result, !!result, result)
    if (!result) {
        message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ üòä'
        attachment = null
        markup = keyboards.default
        console.log('–Ø –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–≥–∞')
        ctx.reply(message, attachment, markup)
    }
    else {
        switch(result) {
            case 'üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå':
                message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ üòä'
                attachment = null
                markup = keyboards.default
                ctx.reply(message, attachment, markup)
                break
            case '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ üòä'
                attachment = null
                markup = keyboards.default
                ctx.reply(message, attachment, markup)
                break
            case '–ù–∞—á–∞—Ç—å': 
                message = `–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç-–≥–∏–º–Ω–∞–∑–∏—Å—Çüìö

            –ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –∏ –¥–∞—Ç—ã –±–ª–∏–∂–∞–π—à–∏—Ö —à–∫–æ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π‚è∞`
                attachment = null
                markup = keyboards.default
                ctx.reply(message, attachment, markup)
                break
            case 'üìé –°–æ—Ü.—Å–µ—Ç–∏ üìé':
                message = '–ü–æ–¥–ø–∏—à–∏—Å—å —Ç–∏–ø–∞ –ø–∂'
                attachment = null
                markup = keyboards.massmedia
                ctx.reply(message, attachment, markup)
                break
            case '–°–æ—Ü.—Å–µ—Ç–∏':
                message = '–ü–æ–¥–ø–∏—à–∏—Å—å —Ç–∏–ø–∞ –ø–∂'
                attachment = null
                markup = keyboards.massmedia
                ctx.reply(message, attachment, markup)
                break
            case 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ':
                ctx.scene.enter('schedule');
                break
            case '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                ctx.scene.enter('schedule');
                break
        }
    }
})

bot.startPolling()

app.listen(port, () => {
    console.log('Bot is up. Deploing on port', port)
})